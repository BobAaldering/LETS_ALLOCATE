#ifndef ALLOCATOR_ALLOCATOR_BENCHMARK_H
#define ALLOCATOR_ALLOCATOR_BENCHMARK_H

#include <iostream> // Include here all the 'iostream' facilities.
#include <vector> // Include here all the 'vector' facilities.
#include <chrono> // Include here all the 'chrono' facilities.
#include <tuple> // Include here all the 'tuple' facilities.
#include <numeric> // Include here all the 'numeric' facilities.

#include "pool_allocator.h" // Include here all the 'pool_allocator' facilities.
#include "malloc_allocator.h" // Include here all the 'malloc_allocator' facilities.
#include "mmap_allocator.h" // Include here all the 'mmap_allocator' facilities.
#include "new_allocator.h" // Include here all the 'new_allocator' facilities.

#include "benchmark_statistics.h" // Include here all the 'benchmark_statistics' facilities.

/// This structure 'average_running_time' is used to calculate the average running time for various runs of the benchmarker.
struct average_running_time {
public:
    /// This operator overloaded function is used to calculate the sum, and number of runnings for the benchmarker.
    /// \param summing_value The value that has to be summed up.
    /// \return The current instance of this structure.
    average_running_time& operator+(const std::size_t& summing_value) {
        m_total_running_time += summing_value; // Add all the values.
        m_number_of_runnings++; // Increment the number of runnings.

        return *this;
    }

    /// This operator overloading returns the average value.
    /// \return The average value calculated for different runs.
    explicit operator double() const {
        return (double)m_total_running_time / (double)m_number_of_runnings; // Return the average running time.
    }

private:
    std::size_t m_total_running_time{}; // This field contains the total running time.
    std::size_t m_number_of_runnings{}; // This field contains the total number of runnings.
};

/// This class 'allocator_benchmark' is used for benchmarking different types of allocators.
class allocator_benchmark {
public:
    /// This is the constructor of the 'allocator_benchmark' class.
    /// \param elements_list A list with the number of elements to benchmark for.
    /// \param run_list  A list for the number of runnings to benchmark for.
    allocator_benchmark(const std::initializer_list<std::size_t>& elements_list, const std::initializer_list<std::size_t>& run_list);

    /// This method benchmarks the memory pool allocator.
    /// \return The statistics generated by this benchmarker.
    [[nodiscard]] benchmark_statistics benchmark_memory_pool() const;

    /// This method benchmarks the 'malloc' allocator.
    /// \return The statistics generated by this benchmarker.
    [[nodiscard]] benchmark_statistics benchmark_memory_malloc() const;

    /// This method benchmarks the 'mmap' allocator.
    /// \return The statistics generated by this benchmarker.
    [[nodiscard]] benchmark_statistics benchmark_memory_mmap() const;

    /// This method benchmarks the 'new' allocator.
    /// \return The statistics generated by this benchmarker.
    [[nodiscard]] benchmark_statistics benchmark_memory_new() const;

private:
    std::vector<std::size_t> m_number_of_runs; // This field contains a vector with the number of runs.
    std::vector<std::size_t> m_number_of_elements; // This field contains a vector with the number of elements.
};


#endif